library(dplyr)
Packages <- c("tidyverse", "haven", "readxl", "janitor", "maditr", "labelled",
"ggplot2", "ggpubr", "ggh4x", "paletteer", "tmap", "sf", "maptools",
"ggthemes", "rnaturalearth", "scales", "ggrepel", "cowplot", "fmsb",
"expss", "viridis", "kableExtra", "RColorBrewer", "openxlsx", "grid",
"Hmisc", "ggcorrplot")
lapply(Packages, require, character.only = TRUE)
# Working directory is set to R Project root folder
# Set relative directory paths for input data and figure output files
data_in <- file.path(".", "FSCI analysis datasets")
fig_out <- file.path(".", "Figures")
# Baseline dataset:
fsci_latest <- read_dta(file.path(data_in, "Supplementary Data - Appendix F - Baseline dataset.dta"))
fsci_latest <- read_dta("Supplementary Data - Appendix F - Baseline dataset.dta")
# Baseline dataset + weighting variables for weighted means
fsci_data_weights <- read_dta(file.path(data_in, "FSCI_2022_latestyear_withweightvars.dta"))
# Metadata file used for labels, weighting by classification, and desirable direction of change
metadata <- read_excel(("Supplementary Data - Appendix E - Metadata and Codebook.xlsx"),
sheet = "Coverage + Labels") %>%
select(-c(15:16))
# Metadata file used for labels, weighting by classification, and desirable direction of change
metadata <- read_excel(("FSCI Baseline_Supplementary Data - Appendix E - Metadata and Codebook.xlsx"),
sheet = "Coverage + Labels") %>%
select(-c(15:16))
# Time series datasets used for supplementary figures
fsci_data <- read_dta(file.path(data_in, "FSCI_2022_timeseries.dta"))
fsci_timeseries_weights <- read_dta(file.path(data_in, "FSCI_2022_timeseries_withweightvars.dta"))
# Keep only years from 2000 forward for supplementary visualizations
fsci_data <- subset(fsci_data, year >= 2000)
# Factor and reorder the income groups
fsci_data <- fsci_data %>% mutate(incgrp = as.factor(incgrp))
levels(fsci_data$incgrp)
fsci_data$incgrp <- factor(fsci_data$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
fsci_latest <- fsci_latest %>% mutate(incgrp = as.factor(incgrp))
fsci_latest$incgrp <- factor(fsci_latest$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
# Prepare color palettes  ######################################################
color10 <-paletteer_d("colorBlindness::LightBlue2DarkBlue10Steps")
color7 <-paletteer_d("colorBlindness::LightBlue2DarkBlue7Steps")
colordiv_redblue12 <- paletteer_d("colorBlindness::Blue2DarkRed12Steps")
colordiv_bluered11 <- paletteer_d("colorBlindness::ModifiedSpectralScheme11Steps")
color3 <- c("#7EC3E5FF", "#A3CC51FF", "#E57E7EFF")
cbpalette_2 <-c("#990F0FFF", "#51A3CCFF")
bluredcont <- paletteer_d("khroma::vik")
colorqual <- paletteer_d("khroma::muted")
cbpalette_urbrurl <- c("#CC8E51FF", "#99540FFF")
continuous <- paletteer_d("RColorBrewer::PuBuGn")
regions <- c("Central Asia" = "#CC6677FF",
"Eastern Asia" = "#332288FF",
"Latin America & Caribbean" = "#DDCC77FF",
"Northern Africa & Western Asia" = "#117733FF",
"Northern America and Europe" = "#88CCEEFF",
"Oceania" = "#882255FF",
"South-eastern Asia" =  "#44AA99FF",
"Southern Asia" = "#999933FF",
"Sub-Saharan Africa" = "#AA4499FF")
brewer.pal(n = 8, name = "YlGnBu")
incomescol <- c("#97a4b2", "#41B6C4", "#1D91C0", "#0C2C84")
brewer.pal(n = 8, name = "PuBuGn")
Blues <- c("gray75", "#A6BDDB", "#67A9CF",  "#02818A", "#016450")
grayblue <- c("#97a4b2","#008989", "#096887", "#244369", "#12233c")
fooddata <- select(fsci_data, c("ISO", "foodsafety", "year")) %>%
rename(iso_a3 = ISO) %>% drop_na(foodsafety) %>% filter(year == "2020")
#World map options
World <- ne_countries(scale = 50,  returnclass = c("sp", "sf"))
#merging data
fooddata_simple<-merge(World, fooddata, by='iso_a3',  duplicateGeoms = TRUE)
#Turn off s2 processing to avoid invalid polygons
sf::sf_use_s2(FALSE)
# Map
food_map <-tm_shape(fooddata_simple) + tm_polygons("foodsafety",
style="cont",
breaks=c(0,20,40,60,80,100),
palette= color10,
title="% Food safety attributes attained by country",
legend.is.portrait=FALSE,
labels = c("0","20","40","60","80","100"),
colorNA = "grey85",
textNA = "Data Unavailable") +
tm_layout(frame = FALSE, legend.outside = TRUE,
legend.outside.position = "bottom", outer.margins=0,
legend.outside.size = .2) +
tm_legend(legend.title.fontface = 2,  # legend bold
legend.title.size = 3,
legend.text.size = 3,
legend.bg.alpha = 0,
legend.width = 5)
food_map
tmap_save(food_map, file.path(fig_out, "S4.10_foodsafety.png"), width = 10, height = 6, dpi=300, units = "in")
