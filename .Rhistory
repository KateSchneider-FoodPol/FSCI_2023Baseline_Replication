library(dplyr)
Packages <- c("tidyverse", "haven", "readxl", "janitor", "maditr", "labelled",
"ggplot2", "ggpubr", "ggh4x", "paletteer", "tmap", "sf", "maptools",
"ggthemes", "rnaturalearth", "scales", "ggrepel", "cowplot", "fmsb",
"expss", "viridis", "kableExtra", "RColorBrewer", "openxlsx", "grid",
"Hmisc", "ggcorrplot")
lapply(Packages, require, character.only = TRUE)
# Working directory is set to R Project root folder
# Set relative directory paths for input data and figure output files
data_in <- file.path(".", "FSCI analysis datasets")
fig_out <- file.path(".", "Figures")
# Baseline dataset:
fsci_latest <- read_dta(file.path(data_in, "Supplementary Data - Appendix F - Baseline dataset.dta"))
fsci_latest <- read_dta("Supplementary Data - Appendix F - Baseline dataset.dta")
# Baseline dataset + weighting variables for weighted means
fsci_data_weights <- read_dta(file.path(data_in, "FSCI_2022_latestyear_withweightvars.dta"))
# Metadata file used for labels, weighting by classification, and desirable direction of change
metadata <- read_excel(("Supplementary Data - Appendix E - Metadata and Codebook.xlsx"),
sheet = "Coverage + Labels") %>%
select(-c(15:16))
# Metadata file used for labels, weighting by classification, and desirable direction of change
metadata <- read_excel(("FSCI Baseline_Supplementary Data - Appendix E - Metadata and Codebook.xlsx"),
sheet = "Coverage + Labels") %>%
select(-c(15:16))
# Time series datasets used for supplementary figures
fsci_data <- read_dta(file.path(data_in, "FSCI_2022_timeseries.dta"))
fsci_timeseries_weights <- read_dta(file.path(data_in, "FSCI_2022_timeseries_withweightvars.dta"))
# Keep only years from 2000 forward for supplementary visualizations
fsci_data <- subset(fsci_data, year >= 2000)
# Factor and reorder the income groups
fsci_data <- fsci_data %>% mutate(incgrp = as.factor(incgrp))
levels(fsci_data$incgrp)
fsci_data$incgrp <- factor(fsci_data$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
fsci_latest <- fsci_latest %>% mutate(incgrp = as.factor(incgrp))
fsci_latest$incgrp <- factor(fsci_latest$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
# Prepare color palettes  ######################################################
color10 <-paletteer_d("colorBlindness::LightBlue2DarkBlue10Steps")
color7 <-paletteer_d("colorBlindness::LightBlue2DarkBlue7Steps")
colordiv_redblue12 <- paletteer_d("colorBlindness::Blue2DarkRed12Steps")
colordiv_bluered11 <- paletteer_d("colorBlindness::ModifiedSpectralScheme11Steps")
color3 <- c("#7EC3E5FF", "#A3CC51FF", "#E57E7EFF")
cbpalette_2 <-c("#990F0FFF", "#51A3CCFF")
bluredcont <- paletteer_d("khroma::vik")
colorqual <- paletteer_d("khroma::muted")
cbpalette_urbrurl <- c("#CC8E51FF", "#99540FFF")
continuous <- paletteer_d("RColorBrewer::PuBuGn")
regions <- c("Central Asia" = "#CC6677FF",
"Eastern Asia" = "#332288FF",
"Latin America & Caribbean" = "#DDCC77FF",
"Northern Africa & Western Asia" = "#117733FF",
"Northern America and Europe" = "#88CCEEFF",
"Oceania" = "#882255FF",
"South-eastern Asia" =  "#44AA99FF",
"Southern Asia" = "#999933FF",
"Sub-Saharan Africa" = "#AA4499FF")
brewer.pal(n = 8, name = "YlGnBu")
incomescol <- c("#97a4b2", "#41B6C4", "#1D91C0", "#0C2C84")
brewer.pal(n = 8, name = "PuBuGn")
Blues <- c("gray75", "#A6BDDB", "#67A9CF",  "#02818A", "#016450")
grayblue <- c("#97a4b2","#008989", "#096887", "#244369", "#12233c")
fooddata <- select(fsci_data, c("ISO", "foodsafety", "year")) %>%
rename(iso_a3 = ISO) %>% drop_na(foodsafety) %>% filter(year == "2020")
#World map options
World <- ne_countries(scale = 50,  returnclass = c("sp", "sf"))
#merging data
fooddata_simple<-merge(World, fooddata, by='iso_a3',  duplicateGeoms = TRUE)
#Turn off s2 processing to avoid invalid polygons
sf::sf_use_s2(FALSE)
# Map
food_map <-tm_shape(fooddata_simple) + tm_polygons("foodsafety",
style="cont",
breaks=c(0,20,40,60,80,100),
palette= color10,
title="% Food safety attributes attained by country",
legend.is.portrait=FALSE,
labels = c("0","20","40","60","80","100"),
colorNA = "grey85",
textNA = "Data Unavailable") +
tm_layout(frame = FALSE, legend.outside = TRUE,
legend.outside.position = "bottom", outer.margins=0,
legend.outside.size = .2) +
tm_legend(legend.title.fontface = 2,  # legend bold
legend.title.size = 3,
legend.text.size = 3,
legend.bg.alpha = 0,
legend.width = 5)
food_map
tmap_save(food_map, file.path(fig_out, "S4.10_foodsafety.png"), width = 10, height = 6, dpi=300, units = "in")
library(dplyr)
Packages <- c("tidyverse", "haven", "readxl", "janitor", "maditr", "labelled",
"ggplot2", "ggpubr", "ggh4x", "paletteer", "tmap", "sf", "maptools",
"ggthemes", "rnaturalearth", "scales", "ggrepel", "cowplot", "fmsb",
"expss", "viridis", "kableExtra", "RColorBrewer", "openxlsx", "grid",
"Hmisc", "ggcorrplot")
lapply(Packages, require, character.only = TRUE)
# Working directory is set to R Project root folder
# Set relative directory paths for input data and figure output files
data_in <- file.path(".", "FSCI analysis datasets")
fig_out <- file.path(".", "Figures")
# Load dataset #################################################################
# Baseline dataset:
fsci_latest <- read_dta("Supplementary Data - Appendix F - Baseline dataset.dta")
# Baseline dataset + weighting variables for weighted means
fsci_data_weights <- read_dta(file.path(data_in, "FSCI_2022_latestyear_withweightvars.dta"))
# Metadata file used for labels, weighting by classification, and desirable direction of change
metadata <- read_excel(("FSCI Baseline_Supplementary Data - Appendix E - Metadata and Codebook.xlsx"),
sheet = "Coverage + Labels") %>%
select(-c(15:16))
# Time series datasets used for supplementary figures
fsci_data <- read_dta(file.path(data_in, "FSCI_2022_timeseries.dta"))
fsci_timeseries_weights <- read_dta(file.path(data_in, "FSCI_2022_timeseries_withweightvars.dta"))
# Keep only years from 2000 forward for supplementary visualizations
fsci_data <- subset(fsci_data, year >= 2000)
# Factor and reorder the income groups
fsci_data <- fsci_data %>% mutate(incgrp = as.factor(incgrp))
levels(fsci_data$incgrp)
fsci_data$incgrp <- factor(fsci_data$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
fsci_latest <- fsci_latest %>% mutate(incgrp = as.factor(incgrp))
fsci_latest$incgrp <- factor(fsci_latest$incgrp, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
# Prepare color palettes  ######################################################
color10 <-paletteer_d("colorBlindness::LightBlue2DarkBlue10Steps")
color7 <-paletteer_d("colorBlindness::LightBlue2DarkBlue7Steps")
colordiv_redblue12 <- paletteer_d("colorBlindness::Blue2DarkRed12Steps")
colordiv_bluered11 <- paletteer_d("colorBlindness::ModifiedSpectralScheme11Steps")
color3 <- c("#7EC3E5FF", "#A3CC51FF", "#E57E7EFF")
cbpalette_2 <-c("#990F0FFF", "#51A3CCFF")
bluredcont <- paletteer_d("khroma::vik")
colorqual <- paletteer_d("khroma::muted")
cbpalette_urbrurl <- c("#CC8E51FF", "#99540FFF")
continuous <- paletteer_d("RColorBrewer::PuBuGn")
regions <- c("Central Asia" = "#CC6677FF",
"Eastern Asia" = "#332288FF",
"Latin America & Caribbean" = "#DDCC77FF",
"Northern Africa & Western Asia" = "#117733FF",
"Northern America and Europe" = "#88CCEEFF",
"Oceania" = "#882255FF",
"South-eastern Asia" =  "#44AA99FF",
"Southern Asia" = "#999933FF",
"Sub-Saharan Africa" = "#AA4499FF")
brewer.pal(n = 8, name = "YlGnBu")
incomescol <- c("#97a4b2", "#41B6C4", "#1D91C0", "#0C2C84")
brewer.pal(n = 8, name = "PuBuGn")
Blues <- c("gray75", "#A6BDDB", "#67A9CF",  "#02818A", "#016450")
grayblue <- c("#97a4b2","#008989", "#096887", "#244369", "#12233c")
data <- select(fsci_data, c(2,14,19:91))
data <- data %>% select(-c("emint_eggs", "emint_chickenmeat", "emint_pork",
"yield_citrus", "yield_eggs", "yield_chickenmeat",
"yield_pork", "yield_pulses", "yield_roottuber",
"yield_treenuts", "unemp_tot", "unemp_u",
"underemp_tot", "underemp_u"))
# Normalized distance to global mean, by income group
df <- fsci_data_weights %>% select(-c("ISO", "fsci_regions", "wb_region", "UNmemberstate",
"UN_contregion_code", "UN_subregion_code",
"UN_intermedregion_code", "m49_code", "GDP_percap",
"UN_continental_region", "UN_subregion",
"UN_intermediary_region", "agland_area",
"righttofood", "emint_eggs", "emint_chickenmeat", "emint_pork",
"yield_citrus", "yield_eggs", "yield_chickenmeat",
"yield_pork", "yield_pulses", "yield_roottuber",
"yield_treenuts", "prod_citrus", "prod_eggs",
"prod_chickenmeat", "prod_pork",
"prod_pulses", "prod_treenuts", "prod_roottuber",
"areaharvested_citrus","producinganimals_eggs",
"producinganimals_chickenmeat", "producinganimals_pork",
"areaharvested_pulses", "areaharvested_roottuber",
"areaharvested_treenuts")) %>%
filter(incgrp!="")
# Melt data long, keeping weighting variables as columns
df2 <- melt(df, cbind("country", "incgrp",  "GDP",
"totalpop", "landarea", "prod_cereals", "prod_fruit",
"prod_beef", "prod_cowmilk", "prod_vegetables", "prod_cerealsnorice",
"prod_rice", "areaharvested_cereals",
"areaharvested_fruit", "producinganimals_beef",
"producinganimals_cowmilk", "areaharvested_vegetables",
"cropland", "agland_area2015", "agland_area2010",
"pop_u"),
variable.name = "indicator",
value.name = "value", na.rm = TRUE) %>%
remove_labels(Value)
levels(df2$indicator)
# Import unit and theme
metadata <- metadata %>%
select(c(Indicator, Short_label, Theme, Domain, Unit, Unit_group, Desirable_direction, mean_weighting)) %>%
mutate(direction = as.numeric(Desirable_direction)) %>%
mutate(across(where(is.character), as.factor)) %>%
select(-c(Unit, Unit_group, Desirable_direction))
names(metadata) <- tolower(names(metadata))
df3 <- left_join(df2, metadata, by = "indicator")
df3 <- filter(df3, !is.na(theme)) %>%
mutate(across(where(is.character), as.factor))
levels(df3$mean_weighting)
lapply(df3, class)
levels(df3$incgrp)
# recode income groups
df3$incgrp <- factor(df3$incgrp, levels = c("Low income", "Lower middle income",
"Upper middle income", "High income"))
levels(df3$incgrp)
# Weighted means:
df4 <- df3 %>%
group_by(indicator) %>%
mutate(globalmean = case_when(
((grepl("production", mean_weighting) & grepl("Emissions intensity, beef", indicator)) ~ weighted.mean(value, prod_beef, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, cereals (excl rice)", indicator)) ~ weighted.mean(value, prod_cerealsnorice, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, milk", indicator)) ~ weighted.mean(value, prod_cowmilk, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, rice", indicator)) ~ weighted.mean(value, prod_rice, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, cereals", indicator)) ~ weighted.mean(value, areaharvested_cereals, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, fruit", indicator)) ~ weighted.mean(value, areaharvested_fruit, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, vegetables", indicator)) ~ weighted.mean(value, areaharvested_vegetables, na.rm = TRUE)),
((grepl("producinganimals", mean_weighting) & grepl("Yield, beef", indicator)) ~ weighted.mean(value, producinganimals_beef, na.rm = TRUE)),
((grepl("producinganimals", mean_weighting) & grepl("Yield, milk", indicator)) ~ weighted.mean(value, producinganimals_cowmilk, na.rm = TRUE)),
(grepl("pop_u", mean_weighting)  ~ weighted.mean(value, pop_u, na.rm = TRUE)), # Eastern asia not showing up
(grepl("GDP", mean_weighting)  ~ weighted.mean(value, GDP, na.rm = TRUE)),
(grepl("unweighted", mean_weighting) ~ mean(value, na.rm = TRUE)),
(grepl("cropland", mean_weighting)  ~ weighted.mean(value, cropland, na.rm = TRUE)),
(grepl("agland_area2015", mean_weighting)  ~ weighted.mean(value, agland_area2015, na.rm = TRUE)),
(grepl("agland_area2010", mean_weighting)  ~ weighted.mean(value, agland_area2010, na.rm = TRUE)),
(grepl("totalpop", mean_weighting) ~ weighted.mean(value, totalpop, na.rm = TRUE)),
(grepl("landarea", mean_weighting) ~ weighted.mean(value, landarea, na.rm = TRUE)),
TRUE ~ mean(value)))
dffix <- df4 %>%
subset(is.na(globalmean)) %>%
drop_na(GDP) %>%
group_by(indicator) %>%
mutate(globalmean = case_when(
indicator == "aginGDP" & is.na(globalmean) ~ weighted.mean(value, GDP, na.rm = TRUE),
TRUE ~ globalmean))
dffix2 <- df4 %>%
subset(is.na(globalmean)) %>%
drop_na(cropland, agland_area2010, agland_area2015) %>%
group_by(indicator) %>%
mutate(globalmean = case_when(
indicator == "functionalintegrity" & is.na(globalmean) ~ weighted.mean(value, agland_area2015, na.rm = TRUE),
indicator == "pesticides" & is.na(globalmean) ~ weighted.mean(value, cropland, na.rm = TRUE),
indicator == "sustNO2mgmt" & is.na(globalmean) ~ weighted.mean(value, cropland, na.rm = TRUE),
TRUE ~ globalmean))
dffix <- rbind(dffix, dffix2)
df4 <- rbind(df4,dffix) %>% drop_na(globalmean)
df4 <- df4 %>% group_by(indicator) %>%
mutate(globalmedian = median(value, na.rm = TRUE),
globalmin = min(value, na.rm = TRUE),
globalmax = max(value, na.rm = TRUE),
globalp25 = quantile(value, c(.25)),
globalp75 = quantile(value, c(.75))) %>%
ungroup() %>% as.data.frame()
df5 <- df4 %>% group_by(incgrp, indicator) %>%
mutate(incmean = case_when(
((grepl("production", mean_weighting) & grepl("Emissions intensity, beef", indicator)) ~ weighted.mean(value, prod_beef, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, cereals (excl rice)", indicator)) ~ weighted.mean(value, prod_cerealsnorice, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, milk", indicator)) ~ weighted.mean(value, prod_cowmilk, na.rm = TRUE)),
((grepl("production", mean_weighting) & grepl("Emissions intensity, rice", indicator)) ~ weighted.mean(value, prod_rice, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, cereals", indicator)) ~ weighted.mean(value, areaharvested_cereals, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, fruit", indicator)) ~ weighted.mean(value, areaharvested_fruit, na.rm = TRUE)),
((grepl("areaharvested", mean_weighting) & grepl("Yield, vegetables", indicator)) ~ weighted.mean(value, areaharvested_vegetables, na.rm = TRUE)),
((grepl("producinganimals", mean_weighting) & grepl("Yield, beef", indicator)) ~ weighted.mean(value, producinganimals_beef, na.rm = TRUE)),
((grepl("producinganimals", mean_weighting) & grepl("Yield, milk", indicator)) ~ weighted.mean(value, producinganimals_cowmilk, na.rm = TRUE)),
((grepl("unweighted", mean_weighting))  ~ mean(value, na.rm = TRUE)),
(grepl("totalpop", mean_weighting) ~ weighted.mean(value, totalpop, na.rm = TRUE)),
(grepl("landarea", mean_weighting) ~ weighted.mean(value, landarea, na.rm = TRUE)),
(grepl("cropland", mean_weighting)  ~ weighted.mean(value, cropland, na.rm = TRUE)),
(grepl("agland_area2015", mean_weighting)  ~ weighted.mean(value, agland_area2015, na.rm = TRUE)),
(grepl("agland_area2010", mean_weighting)  ~ weighted.mean(value, agland_area2010, na.rm = TRUE)),
(grepl("pop_u", mean_weighting)  ~ weighted.mean(value, pop_u, na.rm = TRUE)),
(TRUE ~ mean(value, na.rm = TRUE)))) %>% ungroup() %>%
group_by(incgrp, short_label, globalmean, globalmedian, globalmin, globalmax, globalp25,
globalp75, theme, direction) %>%
summarise(incmean = first(incmean))
df5 <- df5 %>% group_by(short_label) %>%
mutate(incmin = min(incmean, na.rm = TRUE),
incmax = max(incmean, na.rm = TRUE))
# Normalize using min-max scaling
df6 <- df5 %>% mutate(incmeannorm = ((incmean - globalmean) / (incmax - incmin))) %>%
# Directionality
mutate(incmeannorm = incmeannorm * direction)
range(df6$incmeannorm, na.rm = TRUE)
plota <- df6 %>%
filter(theme != "Environment, natural resources, and production" & theme != "Resilience") %>%
ggplot(aes(x = short_label, y = incmeannorm, color = incgrp)) +
geom_hline(yintercept=0) +
geom_point(size = 3.5) +
scale_color_manual(values = incomescol) +
coord_flip() +
labs(title="", x="") +
scale_y_continuous(limits = c(-1,1)) +
scale_x_discrete(limits=rev) +
facet_grid(theme ~ ., scales = "free_y", space = "free_y", switch = "y",
labeller = label_wrap_gen(width = 20, multi_line = TRUE)) +
theme_classic() + theme(strip.text = element_text(size = 7),
strip.placement = "outside",
legend.position="none",
# remove background colour from facet labels
strip.background  = element_rect(fill="gray"),
# remove border from facet label
panel.border = element_blank(),
# make continent names horizontal
axis.text=element_text(size=7),
axis.title=element_text(size=7),
legend.text=element_text(size=7),
legend.title = element_text(size = 7)) +
ylab("") +
grids(axis = c("y"), linetype = "solid", color = "gray")
plota
plotb <- df6 %>%
filter(theme == "Environment, natural resources, and production" | theme == "Resilience") %>%
ggplot(aes(x = short_label, y = incmeannorm, color = incgrp)) +
geom_hline(yintercept=0) +
geom_point(size = 3.5) +
scale_color_manual(values = incomescol) +
coord_flip() +
labs(title="", x="") +
scale_y_continuous(limits = c(-1,1)) +
scale_x_discrete(limits=rev) +
facet_grid(theme ~ ., scales = "free_y", space = "free_y", switch = "y") +
theme_classic() + theme(strip.text = element_text(size = 7),
strip.placement = "outside",
legend.position="none",
# remove background colour from facet labels
strip.background  = element_rect(fill="gray"),
# remove border from facet label
panel.border = element_blank(),
# make continent names horizontal
axis.text=element_text(size=7),
axis.title=element_text(size=7),
legend.text=element_text(size=7),
legend.title = element_text(size = 7)) +
ylab("") +
grids(axis = c("y"), linetype = "solid", color = "gray")
plotb
legend <- df6 %>%
filter(theme == "Environment, natural resources, and production" | theme == "Resilience") %>%
ggplot(aes(x = short_label, y = incmeannorm, color = incgrp)) +
geom_hline(yintercept=0) + geom_point(size = 5) +
scale_color_manual(values = incomescol,
name = "Income group",
labels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income")) +
coord_flip() +
labs(title="", x="") +
scale_y_continuous(limits = c(-1,1)) +
scale_x_discrete(limits=rev) +
facet_grid(theme ~ ., scales = "free_y", space = "free_y", switch = "y") +
theme_classic() + theme(strip.text = element_text(size = 7),
strip.placement = "bottom",
legend.position="bottom",
# remove background colour from facet labels
strip.background  = element_rect(fill="gray"),
# remove border from facet label
panel.border = element_blank(),
# make continent names horizontal
axis.text=element_text(size=7),
axis.title=element_text(size=7),
legend.text=element_text(size=7),
legend.title = element_text(size = 7, face = "bold")) +
ylab("Normalized distance to global mean, sign aligned to desirable direction")
plotlegend <- get_legend(legend)
step1 <- plot_grid(plota, plotb)
step2 <- ggdraw(add_sub(step1,"Normalized distance to global mean (max-min scaling relative to global country-level values). Black vertical line indicates global mean, centered at 0.\nSign aligned to desirable direction.",
size = 7))
plotfig3 <- plot_grid(step2, NULL, plotlegend, nrow = 3, rel_heights = c(1,0,.1))
plotfig3
ggsave(file.path(fig_out, "Figure 4.pdf"), width = 185, height = 185, dpi = 300, units = "mm")
# Figure footnote:
# Normalized distance to global mean (weighted means following weights defined in Table 1) is calculated relative to the global mean and scaled to the minimum and maximum of income group mean, per indicator (global mean centered at 0).  The sign of the normalized distance has been reversed for all indicators where a lower value is more desirable, such that -1 can be interpreted as "worse than" and 1 can be interpreted as “better than" the global mean. Number of people who cannot afford a healthy diet and Degree of legal recognition of the right to food not shown. Product mix in aggregate categories of emissions intensities (cereals) and yields (cereals, citrus, fruit, pulses, roots and tubers, and vegetables) differ across countries.
